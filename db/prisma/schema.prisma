generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String      @unique
  password   String?
  isVerified Boolean     @default(false)
  createdAt  DateTime    @default(now())
  teamId     String?     @db.ObjectId
  team       Team?       @relation("Members", fields: [teamId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Users are linked to a team
  photoData  PhotoData[] // A user can have many PhotoData
  teamAdmin  Team[]      @relation("TeamAdmin")
}

model PhotoData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Each PhotoData belongs to a User
  teamId    String  @db.ObjectId
  team      Team    @relation(fields: [teamId], references: [id], onDelete: Cascade) // PhotoData linked to a Team
}

model Team {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  adminId     String      @db.ObjectId
  admin       User        @relation("TeamAdmin", fields: [adminId], references: [id], onDelete: Cascade) // Admin as a User reference
  description String
  createdAt   DateTime    @default(now())
  members     User[]      @relation("Members") // A team can have many users
  photoData   PhotoData[] // A team can have many PhotoData
  code        String
}
